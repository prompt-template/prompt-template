name: Snapit

on:
  issue_comment:
    types: [created]

jobs:
  snapshot:
    name: Snapit
    if: |
      github.event.issue.pull_request &&
      github.event.comment.body == '/snapit'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - name: Add initial reaction
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: eyes

      - name: Validate and get pull request data
        uses: actions/github-script@v7
        id: pr_data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            try {
              const pullRequest = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              })

              // Pull request from fork
              if (context.payload.repository.full_name !== pullRequest.data.head.repo.full_name) {
                const errorMessage = '`/snapit` is not supported on pull requests from forked repositories.'

                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: errorMessage,
                })

                core.setFailed(errorMessage)
                return
              }

              core.setOutput('repoFullName', pullRequest.data.head.repo.full_name)
              core.setOutput('headSha', pullRequest.data.head.sha)
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      # issue_comment requires us to checkout the branch
      # https://github.com/actions/checkout/issues/331#issuecomment-707103442
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr_data.outputs.repoFullName }}
          ref: ${{ steps.pr_data.outputs.headSha }}

      # Because changeset entries are consumed and removed on the
      # 'changeset-release/main' branch, we need to reset the files
      # so the following 'changeset version --snapshot' command will
      # regenerate the package version bumps with the snapshot releases
      - name: Reset changeset entries on changeset-release/main branch
        run: |
          current_branch=$(git branch --show-current)
          echo "$current_branch"
          if [[ -z "$current_branch" ]]; then
            echo "Current branch is empty. Exiting."
            exit 1
          fi
          if [[ "$current_branch" == 'changeset-release/main' ]]; then
            git checkout origin/main -- .changeset
          fi

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.5.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.11.0
          cache: pnpm

      - name: Install dependencies
        run: pnpm i --frozen-lockfile

      - name: Create an .npmrc
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create and publish snapshot release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const {execa} = await import(`${{ github.workspace }}/node_modules/execa/index.js`)

            await execa({stdio: 'inherit'})`npm run version-packages -- --snapshot snapshot-release`

            const releaseProcess = execa`npm run release -- --no-git-tags --snapshot --tag snapshot-release`
            releaseProcess.stdout.pipe(process.stdout)

            const {stdout} = await releaseProcess

            const newTags = Array.from(
              stdout.matchAll(/New tag:\s+([^\s\n]+)/g),
            ).map(
              ([_, tag]) => tag,
            )

            if (newTags.length) {
              const multiple = newTags.length > 1
              const body = (
                `**Thanks @${context.actor}! ` +
                `Your snapshot${multiple ? 's have' : ' has'} been shipped. ðŸš¢**\n\n` +
                `Test the snapshot${multiple ? 's' : ''} by updating your \`package.json\` ` +
                `with the newly published version${multiple ? 's' : ''}:\n` +
                newTags.map(tag => (
                  '```sh\n' +
                  `npm i ${tag}\n` +
                  '```'
                )).join('\n')
              )

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body,
              })

              return true
            }

            return false

      - name: Add final reaction
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: rocket
